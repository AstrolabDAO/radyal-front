// vite.config.ts
import { defineConfig, loadEnv } from "file:///Users/florian/dev/radyal-front/node_modules/vite/dist/node/index.js";
import react from "file:///Users/florian/dev/radyal-front/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { resolve } from "path";
import { existsSync, readFileSync } from "fs";
import * as dotenv from "file:///Users/florian/dev/radyal-front/node_modules/dotenv/lib/main.js";

// src/utils/mappings.ts
import * as wagmiChains from "file:///Users/florian/dev/radyal-front/node_modules/wagmi/dist/chains.js";
var wagmiChainById = {};
Object.values(wagmiChains).map((chain) => wagmiChainById[chain.id] = chain);

// src/utils/format.ts
import md5 from "file:///Users/florian/dev/radyal-front/node_modules/md5/md5.js";
import { zeroAddress } from "file:///Users/florian/dev/radyal-front/node_modules/viem/_esm/index.js";
var hexToRgba = (hex, opacity) => {
  const _hex = hex.replace("#", "");
  const r = parseInt(_hex.substring(0, 2), 16);
  const g = parseInt(_hex.substring(2, 4), 16);
  const b = parseInt(_hex.substring(4, 6), 16);
  return `rgba(${r}, ${g}, ${b}, ${opacity})`;
};

// src/styles/constants.ts
var SENTIMENT_COLORS = {
  positive: "#00cc7a",
  negative: "#f8b024",
  warning: "#f8b024"
};
var BASE_BACKGROUNDS = {
  primary: "#131829",
  dark: "#1B1B1B"
};
var BACKGROUNDS = {
  base: BASE_BACKGROUNDS.primary,
  dark: BASE_BACKGROUNDS.dark,
  "base-100": BASE_BACKGROUNDS.primary,
  "base-half-transparent": hexToRgba(BASE_BACKGROUNDS.primary, 0.55),
  "base-dark-transparent": hexToRgba(BASE_BACKGROUNDS.primary, 0.75)
};
var COLORS = {
  primary: "#FFB800",
  secondary: "#F6F6F6",
  tertiary: "#FFFFFF",
  active: "#ffd61e",
  neutral: BACKGROUNDS.base,
  base: BACKGROUNDS.base,
  dark: BASE_BACKGROUNDS.dark,
  success: SENTIMENT_COLORS.positive,
  failure: SENTIMENT_COLORS.negative,
  error: SENTIMENT_COLORS.negative,
  ...SENTIMENT_COLORS
};
var SIZES = {
  unitO: "0.075rem",
  unitH: "0.1rem",
  unit1: "0.25rem",
  unit2: "0.5rem",
  unit3: "0.75rem",
  unit4: "1rem",
  unit5: "1.3rem",
  unit6: "1.7rem",
  unit7: "2.2rem",
  unit8: "2.8rem",
  unit9: "3.6rem",
  unit10: "4.6rem",
  unit11: "5.8rem",
  unit12: "7rem",
  unit13: "8.4rem",
  unit14: "10rem"
};

// postcss.config.ts
import postCssImport from "file:///Users/florian/dev/radyal-front/node_modules/postcss-import/index.js";
import tailwindNesting from "file:///Users/florian/dev/radyal-front/node_modules/tailwindcss/nesting/index.js";
import tailwindcss from "file:///Users/florian/dev/radyal-front/node_modules/tailwindcss/lib/index.js";
import autoprefixer from "file:///Users/florian/dev/radyal-front/node_modules/autoprefixer/lib/autoprefixer.js";
import postCssVars from "file:///Users/florian/dev/radyal-front/node_modules/postcss-simple-vars/index.js";
import postcssNesting from "file:///Users/florian/dev/radyal-front/node_modules/postcss-nesting/dist/index.mjs";
var postcss_config_default = {
  syntax: "postcss-scss",
  plugins: [
    postcssNesting,
    postCssImport,
    tailwindNesting,
    tailwindcss,
    autoprefixer,
    postCssVars({
      variables: {
        ...COLORS,
        ...SIZES
      }
    })
  ]
};

// vite.config.ts
import svgr from "file:///Users/florian/dev/radyal-front/node_modules/vite-plugin-svgr/dist/index.js";

// tailwind.config.js
import * as daisyui from "file:///Users/florian/dev/radyal-front/node_modules/daisyui/src/index.js";
import * as themes from "file:///Users/florian/dev/radyal-front/node_modules/daisyui/src/theming/themes.js";
import pSBCLib from "file:///Users/florian/dev/radyal-front/node_modules/shade-blend-color/index.js";
var pSBC = pSBCLib.default;
var PALETTE = {};
var darkOffsets = Array.from({ length: 9 }, (_, i) => (i + 1) * 50);
var lightOffsets = Array.from({ length: 9 }, (_, i) => (i + 1) * 50 + 500);
Object.entries(COLORS).forEach((value) => {
  const [key, color] = value;
  PALETTE[key] = color;
  PALETTE[`${key}-500`] = color;
  darkOffsets.forEach((offset) => {
    PALETTE[`${key}-${offset}`] = pSBC(offset / 2e3, color, "#000000");
  });
  lightOffsets.forEach((offset) => {
    PALETTE[`${key}-${offset}`] = pSBC(-offset / 3500, color, "#ffffff");
  });
});
var tailwind_config_default = {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      colors: {
        ...PALETTE
      }
    }
  },
  plugins: [daisyui],
  daisyui: {
    themes: [
      {
        dark: {
          ...themes.default.dark,
          primary: PALETTE["primary"],
          "primary-content": BACKGROUNDS["base"],
          "base-100": PALETTE["base-100"],
          "neutral": PALETTE["neutral"]
        }
      }
    ],
    // false: only light + dark | true: all themes | array: specific themes like this ["light", "dark", "cupcake"]
    base: true,
    // applies background color and foreground color for root element by default
    styled: true,
    // include daisyUI colors and design decisions for all components
    utils: true,
    // adds responsive and modifier utility classes
    prefix: "",
    // prefix for daisyUI classnames (components, modifiers and responsive class names. Not colors)
    logs: true,
    // Shows info about daisyUI version and used config in the console when building your CSS
    themeRoot: ":root"
    // The element that receives theme color CSS variables
  }
};

// vite.config.ts
var __vite_injected_original_dirname = "/Users/florian/dev/radyal-front";
var envPath = ".env";
var vite_config_default = ({ mode }) => {
  process.env = loadEnv(mode, process.cwd(), "");
  const appEnv = existsSync(envPath) ? dotenv.parse(readFileSync(envPath, { encoding: "utf8" })) : {};
  return defineConfig({
    css: {
      postcss: {
        plugins: postcss_config_default.plugins
      }
    },
    plugins: [react(), svgr()],
    publicDir: "./static",
    define: {
      global: "globalThis",
      __version__: JSON.stringify(process.env.npm_package_version),
      "process.env": appEnv,
      COLORS_PALETTE: PALETTE
    },
    resolve: {
      alias: [
        { find: "@/static", replacement: resolve(__vite_injected_original_dirname, "./static") },
        { find: "~", replacement: resolve(__vite_injected_original_dirname, "./src") },
        { find: "@", replacement: resolve(__vite_injected_original_dirname, "./src") }
      ]
    }
  });
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
